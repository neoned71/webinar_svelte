import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as globals, v as validate_slots, I as get_store_value, J as onMount, T as Token, K as ApiUrl, t as text, a as space, e as element, h as claim_text, c as claim_space, f as claim_element, g as children, b as detach_dev, j as attr_dev, k as add_location, l as insert_hydration_dev, m as append_hydration_dev, A as listen_dev, u as set_data_dev, q as query_selector_all, F as set_style, n as noop } from './client.1200d560.js';
import { I as ImageUpload, D as DataUpload } from './dataUpload.6cd905eb.js';
import { F as Face_screen, b as build } from './_face_screen.3006fd04.js';

/* src/routes/room/[slug]_back.svelte generated by Svelte v3.42.4 */

const { console: console_1, document: document_1 } = globals;
const file = "src/routes/room/[slug]_back.svelte";

// (296:2) {#if user}
function create_if_block(ctx) {
	let t0;
	let t1_value = /*user*/ ctx[0].email + "";
	let t1;
	let t2;
	let button;
	let t3;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			t0 = text("USername:");
			t1 = text(t1_value);
			t2 = space();
			button = element("button");
			t3 = text("Connect Socket");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "USername:");
			t1 = claim_text(nodes, t1_value);
			t2 = claim_space(nodes);
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t3 = claim_text(button_nodes, "Connect Socket");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "w3-button w3-round w3-border");
			add_location(button, file, 298, 2, 5945);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, t1, anchor);
			insert_hydration_dev(target, t2, anchor);
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, t3);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*connectSocket*/ ctx[1], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*user*/ 1 && t1_value !== (t1_value = /*user*/ ctx[0].email + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(296:2) {#if user}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div0;
	let t1;
	let video;
	let t2;
	let div1;
	let t3;
	let hr;
	let if_block = /*user*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			t0 = space();
			div0 = element("div");
			if (if_block) if_block.c();
			t1 = space();
			video = element("video");
			t2 = space();
			div1 = element("div");
			t3 = space();
			hr = element("hr");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all('[data-svelte=\"svelte-oh6yg0\"]', document_1.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			if (if_block) if_block.l(div0_nodes);
			t1 = claim_space(div0_nodes);
			video = claim_element(div0_nodes, "VIDEO", { id: true, class: true });
			var video_nodes = children(video);
			video_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { id: true });
			children(div1).forEach(detach_dev);
			t3 = claim_space(nodes);
			hr = claim_element(nodes, "HR", {});
			this.h();
		},
		h: function hydrate() {
			document_1.title = "Sapper project template";
			attr_dev(video, "id", "mainvideo");
			attr_dev(video, "class", "svelte-icjt7");
			add_location(video, file, 301, 2, 6053);
			set_style(div0, "display", "flex");
			set_style(div0, "width", "100%");
			add_location(div0, file, 294, 1, 5867);
			attr_dev(div1, "id", "video-grid");
			add_location(div1, file, 309, 1, 6344);
			add_location(hr, file, 310, 0, 6372);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div0, anchor);
			if (if_block) if_block.m(div0, null);
			append_hydration_dev(div0, t1);
			append_hydration_dev(div0, video);
			insert_hydration_dev(target, t2, anchor);
			insert_hydration_dev(target, div1, anchor);
			insert_hydration_dev(target, t3, anchor);
			insert_hydration_dev(target, hr, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (/*user*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div0, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div0);
			if (if_block) if_block.d();
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(hr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

console.log("hello");

// export var user;
var roomId;

async function preload(p, session) {
	let params = p.params;
	roomId = params.slug;
	console.log("slug:" + roomId);
	return { roomId };
}

function setStreamToVideoElement(video, stream) {
	console.log("adding video from stream");
	video.srcObject = stream;

	video.addEventListener('loadedmetadata', () => {
		video.play();
	});

	var videoGrid = document.getElementById('video-grid');
	videoGrid.append(video);
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('U5Bslugu5D_back', slots, []);
	var loginPath = get_store_value(ApiUrl);
	var socket = null;
	var user = null;
	var myPeer;
	const peers = {};
	let { roomId } = $$props;
	var room;
	console.log(roomId);
	var isMaster = false;

	onMount(async () => {
		console.log("mounted");

		// localStorage.setItem("token","some value");
		var token = localStorage.getItem("token");

		if (!token) {
			console.log("yes");
		} // location.href="/login";

		Token.set(token);

		// console.log(loginPath+'/auth/whoami');
		const res = await fetch(loginPath + '/auth/whoami', {
			mode: 'cors',
			method: 'get',
			headers: { 'Authorization': 'Bearer ' + token }
		});

		if (res.status == 200) {
			try {
				let data = await res.text();
				data = await JSON.parse(data);
				$$invalidate(0, user = data.user);
			} catch(e) {
				console.log("caught");

				//this.redirect(300,"/login");
				// this.error(e,data.message);
				console.log(e);
			}
		} else {
			console.log(await res.text());
		} // user.email="no logged";
		// return {user};

		// this.redirect(300,"/login");
		// 
		if (user) {
			// console.log(loginPath+'/auth/whoami');
			const res = await fetch(loginPath + '/rooms/status/' + roomId, {
				mode: 'cors',
				method: 'get',
				headers: { 'Authorization': 'Bearer ' + token }
			});

			if (res.status == 200) {
				try {
					let data = await res.text();
					data = await JSON.parse(data);
					room = data.data;
				} catch(e) {
					console.log("caught");
					console.log(e);
				}
			}
		}
	});

	async function connectSocket() {
		var token = localStorage.getItem("token");
		var queryString = "room_id=" + roomId;
		console.log("query: " + queryString);
		console.log("checkpoint 0");

		socket = build.io("", {
			path: "/socket.io",
			query: queryString,
			extraHeaders: { "Authorization": "Bearer " + token },
			transports: ['polling']
		});

		socket.on("connect", () => {
			initializeSocket(socket);
		});

		// socket.emit('join_room', roomId, user.id);
		// console.log("user id:"+userId);
		try {
			var stream = await navigator.mediaDevices.getUserMedia({ video: {}, audio: {} });
			console.log(stream.getTracks());

			if (stream.getTracks().length > 0) {
				initializePeer(stream);
			} else {
				console.log("empty stream, no tracks");
			}
		} catch(e) {
			alert("failed to start stream");
		}
	}

	function initializePeer(stream) {
		myPeer = new Peer(user.id,
		{
				host: 'drawpad.neoned71.com',
				port: '11001',
				secure: true,
				config: {
					'iceServers': [
						{ url: 'stun:stun.l.google.com:19302' },
						{
							url: 'turn:drawpad.neoned71.com:3478',
							credential: 'neon',
							username: 'neoned71'
						}
					]
				}
			});

		console.log(myPeer);

		myPeer.on('open', id => {
			console.log("id recieved: " + id + " userId:" + user.id);
			socket.emit('join_room', roomId, user.id);
		});

		var video = document.querySelector("#mainvideo");
		video.srcObject = stream;
		video.play();
		alert("stream set");

		myPeer.on('call', call => {
			// console.log("inside on call,answering with stream object... ");
			console.log("call received");

			// const video = document.createElement('video');
			var aVideo = document.createElement('video');

			call.video = aVideo;

			call.on('stream', userVideoStream => {
				console.log("stream received");
				setStreamToVideoElement(aVideo, userVideoStream);
			});

			call.on('close', () => {
				call.video.remove();
				console.log("call closed, video element removed");
			});

			call.answer(stream);
		});

		myPeer.on('connection', () => {
			console.log("connection peer");
		});
	}

	function initializeSocket(socket) {
		//register for all the socket events here!
		socket.on('user-connected', userId => {
			alert("inside user connected 1");
			callNewUser(userId, stream);
		});

		socket.on('user-disconnected', userId => {
			console.log("inside user disconnected 1" + userId);
		});
	}

	function callNewUser(userId, stream) {
		var call = myPeer.call(userId, stream);
		var mvideo = document.createElement('video');
		call.video = mvideo;
		console.log("creating a call");

		call.on('stream', userVideoStream => {
			console.log("stream recieved: " + userVideoStream);
			setStreamToVideoElement(call.video, userVideoStream);
		});

		call.on('close', () => {
			console.log("stream closed");
			call.video.remove();
		});

		peers[userId] = call;
	}

	function signal(sig, args) {
		if (socket) {
			socket.emit(sig, ...args); //args => array
		}
	}

	const writable_props = ['roomId'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<U5Bslugu5D_back> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('roomId' in $$props) $$invalidate(2, roomId = $$props.roomId);
	};

	$$self.$capture_state = () => ({
		roomId,
		preload,
		ImageUpload,
		DataUpload,
		FaceScreen: Face_screen,
		onMount,
		Token,
		ApiUrl,
		get: get_store_value,
		io: build.io,
		loginPath,
		socket,
		user,
		myPeer,
		peers,
		roomId,
		room,
		isMaster,
		connectSocket,
		initializePeer,
		initializeSocket,
		callNewUser,
		setStreamToVideoElement,
		signal
	});

	$$self.$inject_state = $$props => {
		if ('loginPath' in $$props) loginPath = $$props.loginPath;
		if ('socket' in $$props) socket = $$props.socket;
		if ('user' in $$props) $$invalidate(0, user = $$props.user);
		if ('myPeer' in $$props) myPeer = $$props.myPeer;
		if ('roomId' in $$props) $$invalidate(2, roomId = $$props.roomId);
		if ('room' in $$props) room = $$props.room;
		if ('isMaster' in $$props) isMaster = $$props.isMaster;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [user, connectSocket, roomId];
}

class U5Bslugu5D_back extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { roomId: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D_back",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*roomId*/ ctx[2] === undefined && !('roomId' in props)) {
			console_1.warn("<U5Bslugu5D_back> was created without expected prop 'roomId'");
		}
	}

	get roomId() {
		throw new Error("<U5Bslugu5D_back>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set roomId(value) {
		throw new Error("<U5Bslugu5D_back>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { U5Bslugu5D_back as default, preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
