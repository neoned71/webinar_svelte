import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as globals, v as validate_slots, e as element, t as text, a as space, f as claim_element, g as children, h as claim_text, b as detach_dev, c as claim_space, k as add_location, j as attr_dev, H as src_url_equal, F as set_style, l as insert_hydration_dev, m as append_hydration_dev, A as listen_dev, u as set_data_dev, n as noop, D as run_all, L as binding_callbacks, z as set_input_value, B as prevent_default } from './client.b4cb7a6b.js';

/* eslint-env browser */
var browser = typeof self == 'object' ? self.FormData : window.FormData;

/* src/routes/_utils/imageUpload.svelte generated by Svelte v3.40.2 */

const { console: console_1$1 } = globals;
const file$1 = "src/routes/_utils/imageUpload.svelte";

// (47:8) {:else}
function create_else_block(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "avatar svelte-16mpme9");
			if (!src_url_equal(img.src, img_src_value = "/images/blank.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			add_location(img, file$1, 47, 8, 1052);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, img, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(47:8) {:else}",
		ctx
	});

	return block;
}

// (45:8) {#if avatar}
function create_if_block(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "avatar svelte-16mpme9");
			if (!src_url_equal(img.src, img_src_value = /*avatar*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			add_location(img, file$1, 45, 8, 983);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*avatar*/ 1 && !src_url_equal(img.src, img_src_value = /*avatar*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(45:8) {#if avatar}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div1;
	let h4;
	let t0;
	let t1;
	let t2;
	let t3;
	let img;
	let img_src_value;
	let t4;
	let div0;
	let t5;
	let t6;
	let input;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*avatar*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			h4 = element("h4");
			t0 = text(/*name*/ ctx[1]);
			t1 = text(" for the certificates");
			t2 = space();
			if_block.c();
			t3 = space();
			img = element("img");
			t4 = space();
			div0 = element("div");
			t5 = text("Choose Image");
			t6 = space();
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			h4 = claim_element(div1_nodes, "H4", {});
			var h4_nodes = children(h4);
			t0 = claim_text(h4_nodes, /*name*/ ctx[1]);
			t1 = claim_text(h4_nodes, " for the certificates");
			h4_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			if_block.l(div1_nodes);
			t3 = claim_space(div1_nodes);
			img = claim_element(div1_nodes, "IMG", { class: true, src: true, alt: true });
			t4 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t5 = claim_text(div0_nodes, "Choose Image");
			div0_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);
			input = claim_element(div1_nodes, "INPUT", { style: true, type: true, accept: true });
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h4, file$1, 42, 1, 914);
			attr_dev(img, "class", "upload svelte-16mpme9");
			if (!src_url_equal(img.src, img_src_value = "https://static.thenounproject.com/png/625182-200.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			add_location(img, file$1, 49, 4, 1125);
			attr_dev(div0, "class", "chan");
			add_location(div0, file$1, 50, 8, 1258);
			set_style(input, "display", "none");
			attr_dev(input, "type", "file");
			attr_dev(input, "accept", ".jpg, .jpeg, .png");
			add_location(input, file$1, 51, 8, 1339);
			attr_dev(div1, "id", "app");
			attr_dev(div1, "class", "svelte-16mpme9");
			add_location(div1, file$1, 41, 0, 898);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div1, anchor);
			append_hydration_dev(div1, h4);
			append_hydration_dev(h4, t0);
			append_hydration_dev(h4, t1);
			append_hydration_dev(div1, t2);
			if_block.m(div1, null);
			append_hydration_dev(div1, t3);
			append_hydration_dev(div1, img);
			append_hydration_dev(div1, t4);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, t5);
			append_hydration_dev(div1, t6);
			append_hydration_dev(div1, input);
			/*input_binding*/ ctx[7](input);

			if (!mounted) {
				dispose = [
					listen_dev(img, "click", /*click_handler*/ ctx[4], false, false, false),
					listen_dev(div0, "click", /*click_handler_1*/ ctx[5], false, false, false),
					listen_dev(input, "change", /*change_handler*/ ctx[6], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*name*/ 2) set_data_dev(t0, /*name*/ ctx[1]);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div1, t3);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if_block.d();
			/*input_binding*/ ctx[7](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ImageUpload', slots, []);
	let { avatar } = $$props, { name } = $$props;
	console.log("avatar" + avatar);
	let fileinput;
	var formData = new browser();

	const onFileSelected = async e => {
		let image = e.target.files[0];

		//fetch upload of the image as the logo of the company!
		formData.append(name, image);

		const options = { method: 'POST', body: formData }; // If you add this, upload won't work
		// headers: {
		//   'Content-Type': 'multipart/form-data',

		// }
		var res = await fetch(`/utils/${name}ImageUpload.json`, options);

		if (res.status == 200) {
			let reader = new FileReader();
			reader.readAsDataURL(image);

			reader.onload = e => {
				$$invalidate(0, avatar = e.target.result);
			};
		} else {
			let text = await res.text();
			text = JSON.parse(text);
			alert(text.message);
		}
	};

	const writable_props = ['avatar', 'name'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<ImageUpload> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		fileinput.click();
	};

	const click_handler_1 = () => {
		fileinput.click();
	};

	const change_handler = e => onFileSelected(e);

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			fileinput = $$value;
			$$invalidate(2, fileinput);
		});
	}

	$$self.$$set = $$props => {
		if ('avatar' in $$props) $$invalidate(0, avatar = $$props.avatar);
		if ('name' in $$props) $$invalidate(1, name = $$props.name);
	};

	$$self.$capture_state = () => ({
		avatar,
		name,
		fileinput,
		FormData: browser,
		formData,
		onFileSelected
	});

	$$self.$inject_state = $$props => {
		if ('avatar' in $$props) $$invalidate(0, avatar = $$props.avatar);
		if ('name' in $$props) $$invalidate(1, name = $$props.name);
		if ('fileinput' in $$props) $$invalidate(2, fileinput = $$props.fileinput);
		if ('formData' in $$props) formData = $$props.formData;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		avatar,
		name,
		fileinput,
		onFileSelected,
		click_handler,
		click_handler_1,
		change_handler,
		input_binding
	];
}

class ImageUpload extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { avatar: 0, name: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ImageUpload",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*avatar*/ ctx[0] === undefined && !('avatar' in props)) {
			console_1$1.warn("<ImageUpload> was created without expected prop 'avatar'");
		}

		if (/*name*/ ctx[1] === undefined && !('name' in props)) {
			console_1$1.warn("<ImageUpload> was created without expected prop 'name'");
		}
	}

	get avatar() {
		throw new Error("<ImageUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set avatar(value) {
		throw new Error("<ImageUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<ImageUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<ImageUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/_utils/dataUpload.svelte generated by Svelte v3.40.2 */

const { console: console_1 } = globals;
const file = "src/routes/_utils/dataUpload.svelte";

function create_fragment(ctx) {
	let div;
	let form;
	let h60;
	let t0;
	let input0;
	let t1;
	let h61;
	let t2;
	let input1;
	let t3;
	let h62;
	let t4;
	let input2;
	let t5;
	let input3;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			form = element("form");
			h60 = element("h6");
			t0 = text("Name");
			input0 = element("input");
			t1 = space();
			h61 = element("h6");
			t2 = text("Organization");
			input1 = element("input");
			t3 = space();
			h62 = element("h6");
			t4 = text("Post");
			input2 = element("input");
			t5 = space();
			input3 = element("input");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			form = claim_element(div_nodes, "FORM", {});
			var form_nodes = children(form);
			h60 = claim_element(form_nodes, "H6", {});
			var h60_nodes = children(h60);
			t0 = claim_text(h60_nodes, "Name");
			h60_nodes.forEach(detach_dev);

			input0 = claim_element(form_nodes, "INPUT", {
				type: true,
				name: true,
				placeholder: true
			});

			t1 = claim_space(form_nodes);
			h61 = claim_element(form_nodes, "H6", {});
			var h61_nodes = children(h61);
			t2 = claim_text(h61_nodes, "Organization");
			h61_nodes.forEach(detach_dev);

			input1 = claim_element(form_nodes, "INPUT", {
				type: true,
				name: true,
				placeholder: true
			});

			t3 = claim_space(form_nodes);
			h62 = claim_element(form_nodes, "H6", {});
			var h62_nodes = children(h62);
			t4 = claim_text(h62_nodes, "Post");
			h62_nodes.forEach(detach_dev);

			input2 = claim_element(form_nodes, "INPUT", {
				type: true,
				name: true,
				placeholder: true
			});

			t5 = claim_space(form_nodes);
			input3 = claim_element(form_nodes, "INPUT", { type: true });
			form_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h60, file, 54, 2, 900);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "name", "name");
			attr_dev(input0, "placeholder", /*name*/ ctx[1]);
			add_location(input0, file, 54, 15, 913);
			add_location(h61, file, 55, 2, 986);
			attr_dev(input1, "type", "text");
			attr_dev(input1, "name", "organization");
			attr_dev(input1, "placeholder", /*organization*/ ctx[0]);
			add_location(input1, file, 55, 23, 1007);
			add_location(h62, file, 56, 2, 1104);
			attr_dev(input2, "type", "text");
			attr_dev(input2, "name", "post");
			attr_dev(input2, "placeholder", /*post*/ ctx[2]);
			add_location(input2, file, 56, 15, 1117);
			attr_dev(input3, "type", "submit");
			input3.value = "Save";
			add_location(input3, file, 58, 2, 1192);
			add_location(form, file, 52, 1, 851);
			attr_dev(div, "id", "app");
			attr_dev(div, "class", "svelte-16mpme9");
			add_location(div, file, 51, 0, 835);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, form);
			append_hydration_dev(form, h60);
			append_hydration_dev(h60, t0);
			append_hydration_dev(form, input0);
			set_input_value(input0, /*name*/ ctx[1]);
			append_hydration_dev(form, t1);
			append_hydration_dev(form, h61);
			append_hydration_dev(h61, t2);
			append_hydration_dev(form, input1);
			set_input_value(input1, /*organization*/ ctx[0]);
			append_hydration_dev(form, t3);
			append_hydration_dev(form, h62);
			append_hydration_dev(h62, t4);
			append_hydration_dev(form, input2);
			set_input_value(input2, /*post*/ ctx[2]);
			append_hydration_dev(form, t5);
			append_hydration_dev(form, input3);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[4]),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[5]),
					listen_dev(input2, "input", /*input2_input_handler*/ ctx[6]),
					listen_dev(form, "submit", prevent_default(/*updateInfo*/ ctx[3]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*name*/ 2) {
				attr_dev(input0, "placeholder", /*name*/ ctx[1]);
			}

			if (dirty & /*name*/ 2 && input0.value !== /*name*/ ctx[1]) {
				set_input_value(input0, /*name*/ ctx[1]);
			}

			if (dirty & /*organization*/ 1) {
				attr_dev(input1, "placeholder", /*organization*/ ctx[0]);
			}

			if (dirty & /*organization*/ 1 && input1.value !== /*organization*/ ctx[0]) {
				set_input_value(input1, /*organization*/ ctx[0]);
			}

			if (dirty & /*post*/ 4) {
				attr_dev(input2, "placeholder", /*post*/ ctx[2]);
			}

			if (dirty & /*post*/ 4 && input2.value !== /*post*/ ctx[2]) {
				set_input_value(input2, /*post*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('DataUpload', slots, []);

	let { organization = "organization" } = $$props,
		{ name = "name" } = $$props,
		{ post = "post" } = $$props;

	async function updateInfo() {
		var body = { organization, name, post };
		console.log(body);

		const options = {
			mode: "cors",
			headers: { "Content-Type": "application/json" },
			method: 'POST',
			body: JSON.stringify(body)
		};

		var res = await fetch(`/utils/infoUpload.json`, options);

		if (res.status == 200) ; else // reset the input fields with placeholders
		{
			let text = await res.text(); //successfullt updated
			text = JSON.parse(text);
			alert(text.message);
		}
	}

	const writable_props = ['organization', 'name', 'post'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<DataUpload> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		name = this.value;
		$$invalidate(1, name);
	}

	function input1_input_handler() {
		organization = this.value;
		$$invalidate(0, organization);
	}

	function input2_input_handler() {
		post = this.value;
		$$invalidate(2, post);
	}

	$$self.$$set = $$props => {
		if ('organization' in $$props) $$invalidate(0, organization = $$props.organization);
		if ('name' in $$props) $$invalidate(1, name = $$props.name);
		if ('post' in $$props) $$invalidate(2, post = $$props.post);
	};

	$$self.$capture_state = () => ({ organization, name, post, updateInfo });

	$$self.$inject_state = $$props => {
		if ('organization' in $$props) $$invalidate(0, organization = $$props.organization);
		if ('name' in $$props) $$invalidate(1, name = $$props.name);
		if ('post' in $$props) $$invalidate(2, post = $$props.post);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		organization,
		name,
		post,
		updateInfo,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler
	];
}

class DataUpload extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { organization: 0, name: 1, post: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DataUpload",
			options,
			id: create_fragment.name
		});
	}

	get organization() {
		throw new Error("<DataUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set organization(value) {
		throw new Error("<DataUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<DataUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<DataUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get post() {
		throw new Error("<DataUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<DataUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { DataUpload as D, ImageUpload as I };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
